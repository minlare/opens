import Head from "next/head";
import { Inter } from "next/font/google";
import Fuse from "fuse.js";
import styles from "@/styles/Home.module.scss";
import { build } from "search-params";
import { useEffect, useMemo, useState } from "react";
import classNames from "classnames";
import { sortBy, uniqBy } from "lodash";

const inter = Inter({ subsets: ["latin"] });

const maleEngland = [
  { key: "fid#4", name: "gender", values: [{ name: "Male", key: "Male" }] },
  { key: "fid#12", name: "age", values: [{ name: "Any Age", key: "Any Age" }] },
  {
    key: "fid#16",
    name: "country",
    values: [{ name: "England", key: "England" }],
  },
];

const types = ["Individual", "Pairs", "Team"];

const fetcher = (offset, opts) => {
  const params = build({ offset, filters: JSON.stringify(opts) });
  return fetch(["/api/search", params].join("?")).then((r) => r.json());
};

const date = new Date("2016-08-25T00:00:00");
const userTimezoneOffset = date.getTimezoneOffset() * 60000;

const formatDate = (date) => new Date(date).toDateString();

const getPoint = (key, result, format = true) => {
  const point =
    result.dataPoints.find((point) => point.key === key)?.value ?? "";

  if (key === "Date" && point && format) {
    return formatDate(point * 1000 - userTimezoneOffset);
  }

  if (key === "Golf Club") {
    const url = new URL("https://www.google.com/maps/search/");
    url.searchParams.set("api", "1");
    url.searchParams.set("query", point);
    return (
      <a href={url.toString()} target="_blank">
        {point}
      </a>
    );
  }

  return point;
};

const columns = [
  "Golf Club",
  "Type",
  "County",
  "Format",
  "Entry Fee",
  "Date",
  "Day",
  "Holes",
];

export default function Home() {
  const [results, setResults] = useState([]);
  const [searchResults, setSearchResults] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentType, setCurrentType] = useState("Pairs");
  const [search, setSearch] = useState("");
  const [date, setDate] = useState("");
  const [sort, setSort] = useState("Date");
  const hasResults = !isLoading && results && results.length > 0;

  useEffect(() => {
    setIsLoading(true);

    const getResults = async () => {
      const fetchOptions = [
        {
          key: "fid#5",
          name: "type",
          values: [{ name: currentType, key: currentType }],
        },
        ...maleEngland,
      ];

      let offset = 0;
      let data = await fetcher(offset, fetchOptions);

      setResults([...data.results]);
      while (data && data.totalResults && data.totalResults > offset) {
        offset = offset + 24;
        if (offset > data.totalResults) {
          offset = data.totalResults;
        }
        data = await fetcher(offset, fetchOptions);
        if (data.results.length > 0) {
          setResults((r) => uniqBy([...r, ...data.results], "link"));
        }
      }
    };

    setResults([]);
    getResults().then(() => {
      setIsLoading(false);
    });
  }, [currentType]);

  const fuse = useMemo(
    () =>
      new Fuse(results, {
        threshold: 0.0,
        keys: ["dataPoints.value"],
        findAllMatches: true,
        ignoreLocation: true,
      }),
    [results]
  );

  useEffect(() => {
    let searchResult = search
      ? fuse.search(search)?.map(({ item }) => item) ?? results
      : results;

    if (date) {
      searchResult = searchResult.filter((result) => {
        const openDate = getPoint("Date", result);
        return formatDate(date) === openDate;
      });
    }

    const sorted = sortBy(searchResult, (result) =>
      getPoint(sort, result, false)
    );

    setSearchResults(sorted);
  }, [fuse, search, results, sort, date]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta name="referrer" content="never" />
        <meta name="referrer" content="no-referrer" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={classNames(styles.main, inter.className)}>
        <nav>
          {types.map((type) => (
            <button
              className={classNames({ active: type === currentType })}
              key={type}
              onClick={() => setCurrentType(type)}
            >
              {type}
            </button>
          ))}
        </nav>
        <br />
        <form>
          <label>Search</label>
          <br />
          <input
            type="search"
            onInput={(e) => setSearch(e.target.value)}
            value={search}
          />
        </form>
        <form>
          <label>Date</label>
          <br />
          <input
            type="date"
            onChange={(e) => setDate(e.target.value)}
            value={date}
          />
        </form>
        <br />
        <h1>Results: {searchResults.length}</h1>
        {isLoading && "Loading..."}
        {hasResults && (
          <table>
            <thead>
              <tr>
                {columns.map((col) => (
                  <th
                    className={classNames({ active: sort === col })}
                    key={col}
                    onClick={() => setSort(col)}
                  >
                    {col}
                  </th>
                ))}
                <th></th>
              </tr>
            </thead>
            <tbody>
              {searchResults.map((result, resultIndex) => (
                <tr key={result.name + result.content + resultIndex}>
                  {columns.map((col) => (
                    <td key={col}>{getPoint(col, result)}</td>
                  ))}
                  <td>
                    <a href={result.link} rel="noreferrer" target="_blank">
                      Book
                    </a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </main>
    </>
  );
}
